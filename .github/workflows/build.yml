name: Github Build

on:
  push:
    branches: [master, develop]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [master, develop, /^release/.*$/, /^feature/.*$/]
env:
  CI: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

      - name: Install
        run: npm ci

      - name: Bootstrap
        run: npm run bs

      - name: Linting
        run: npm run lint

      - name: Test
        run: npm run test

      - name: Build
        run: npm run build --if-present

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: dev-travis
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    # # Define ${CURRENT_VERSION}
    # - name: Set Current Version
    #   shell: bash -ex {0}
    #   run: |
    #     CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
    #     echo "::set-env name=CURRENT_VERSION::${CURRENT_VERSION}"
    # - name: Tag Check
    #   id: tag_check
    #   shell: bash -ex {0}
    #   run: |
    #     GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
    #     http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
    #       -H "Authorization: token ${GITHUB_TOKEN}")
    #     if [ "$http_status_code" -ne "404" ] ; then
    #       echo "::set-output name=exists_tag::true"
    #     else
    #       echo "::set-output name=exists_tag::false"
    #     fi
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # - name: Create Git Tag
    #   if: steps.tag_check.outputs.exists_tag == 'false'
    #   uses: azu/action-package-version-to-git-tag@v1
    #   with:
    #     version: ${{ env.CURRENT_VERSION }}
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     github_repo: ${{ github.repository }}
    #     git_commit_sha: ${{ github.sha }}
    #     git_tag_prefix: "v"
    # - name: Create Release
    #   id: create_release
    #   if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ env.CURRENT_VERSION }}
    #     # Copy Pull Request's tile and body to Release Note
    #     release_name: ${{ github.event.pull_request.title }}
    #     body: |
    #       ${{ github.event.pull_request.body }}
    #     draft: false
    #     prerelease: false
